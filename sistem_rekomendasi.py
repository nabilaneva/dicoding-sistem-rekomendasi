# -*- coding: utf-8 -*-
"""Sistem Rekomendasi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FTW9Lc-EMu-QebZh_RYK9o7lMppHT7SS

# **Sistem Rekomendasi Product di Sociolla**

## **Sumber Dataset**
https://www.kaggle.com/datasets/ibrahimhafizhan/sociolla-all-brands-products-catalog

- **Nama:** Nabila Neva Rahmawati
- **Email:** nabilanevaaa@gmail.com
- **ID Dicoding:** nabilaneva

# **Import Library**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns
from google.colab import files
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""# **Data Loading**

Pada bagian ini, file kaggle.json di-upload untuk autentikasi ke Kaggle, kemudian API key disalin ke direktori yang tepat. Dataset sociolla-all-brands-products-catalog diunduh dan diekstrak. Setelah itu, file CSV dibaca menggunakan pandas dan lima baris pertama ditampilkan dengan `df.head()` untuk melihat gambaran awal data sebelum analisis lebih lanjut.
"""

# Upload file kaggle.json untuk autentikasi
files.upload()

# Setup API key agar bisa akses Kaggle Dataset
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Download dataset dari Kaggle: Sociolla All Brands Products Catalog
!kaggle datasets download -d ibrahimhafizhan/sociolla-all-brands-products-catalog

# Unzip file dataset
!unzip sociolla-all-brands-products-catalog.zip

# Membaca file csv
df = pd.read_csv("products_all_brands.csv")

# Menampilkan 5 baris pertama
df.head()

"""# **Data Understanding**

Pada tahap ini, dilakukan pemahaman awal terhadap dataset dengan menggunakan beberapa fungsi dasar. Fungsi `df.info()` memberikan informasi umum, `df.describe()` menyajikan statistik deskriptif, `df.isna().sum()` menghitung missing values, dan `df.duplicated().sum()` mendeteksi duplikat. Untuk variasi data, digunakan `df.nunique()` untuk menghitung nilai unik. Selanjutnya, analisis dilakukan pada 10 kategori teratas dan 10 brand teratas berdasarkan jumlah rating yang diterima.
"""

# Menampilkan informasi umum tentang dataset
df.info()

# Menampilkan statistik deskriptif untuk kolom numerik
df.describe()

# Menampilkan missing values
df.isna().sum()

# Menampilkan data duplikat
print("Jumlah duplikasi: ", df.duplicated().sum())

# Menampilkan jumlah brand dan kategori utama produk yang berbeda
print('Jumlah produk yang berbeda: ', len(df['product_name'].unique()))
print('Jumlah brand yang berbeda: ', len(df['brand_name'].unique()))
print('Jumlah kategori utama produk yang berbeda: ', len(df['default_category'].unique()))

# Distribusi default_category 10 teratas
plt.figure(figsize=(12,6))
df['default_category'].value_counts().head(10).plot(kind='bar')
plt.title('Top 10 default_category')
plt.xlabel('default_category')
plt.ylabel('Jumlah default_category')
plt.xticks(rotation=45)
plt.show()

# Mengambil 10 brand teratas berdasarkan jumlah rating
jumlah_rating_per_brand = df.groupby('brand_name')['average_rating'].sum()
top_brand = jumlah_rating_per_brand.sort_values(ascending=False).head(10).reset_index()
top_brand.columns = ['brand_name', 'average_rating']

# Distribusi 10 brand dengan jumlah rating terbanyak
plt.figure(figsize=(12, 6))
sns.barplot(data=top_brand, x='brand_name', y='average_rating')
plt.title('Top 10 Brand dengan Jumlah Rating Terbanyak')
plt.xlabel('Brand')
plt.ylabel('Jumlah Rating')
plt.xticks(rotation=45)
plt.show()

"""Dataset terdiri dari 7.636 baris dan 19 kolom tanpa duplikasi, dengan beberapa nilai hilang: `price_by_combinations` (3.549 data), `active_date` (2.102 data), dan `average_rating_by_types` (1.846 data). Kategori produk terbanyak adalah Face Serum, diikuti oleh Face Cream & Lotion, Sheet Mask, dan Face Wash. Sedangkan brand dengan rating terbanyak adalah Tammia, diikuti oleh Jacquelle, Nivea, Wardah, dan lainnya.

# **Data Preparation**

Pada tahap ini, dilakukan pembersihan data dengan menghapus semua baris yang mengandung nilai kosong (NaN) menggunakan `df.dropna()`. Setelah itu, dilakukan pengecekan ulang dengan `df.isna().sum()` untuk memastikan tidak ada lagi missing value dalam dataset.
"""

# Menghapus semua baris yang memiliki nilai NaN
df = df.dropna()

# Mengecek kembali missing value
df.isna().sum()

"""Semua baris yang mengandung nilai kosong telah dihapus menggunakan `df.dropna()`. Hasilnya menunjukkan bahwa tidak ada lagi nilai kosong dalam dataset.

## **TF-IDF Vectorizer**

TF-IDF Vectorizer digunakan untuk mengonversi data kategori produk menjadi representasi numerik. Dengan menghitung IDF pada data `default_category`, hasilnya diubah menjadi matriks TF-IDF yang menggambarkan pentingnya setiap kata dalam kategori produk. Matriks ini kemudian diubah menjadi DataFrame untuk mempermudah analisis kemiripan antar produk dalam sistem rekomendasi.
"""

data = df
data.sample(5)

# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()

# Melakukan perhitungan idf pada data cuisine
tf.fit(data['default_category'])

# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names_out()

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(data['default_category'])

# Melihat ukuran matrix tfidf
tfidf_matrix.shape

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

# Membuat dataframe TF-IDF dengan baris berupa nama produk dan kolom berupa jenis kategori
pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=data.product_name
).sample(22, axis=1).sample(20, axis=0)

"""Hasil dari TF-IDF Vectorizer menghasilkan matriks 2738 produk dan 158 kategori, di mana setiap produk diberi nilai relevansi terhadap kategori tertentu. Matriks ini membantu mengidentifikasi kategori yang paling relevan untuk setiap produk.

# **Modeling**

## **Cosine Similarity**

Cosine similarity digunakan untuk mengukur kesamaan antar produk berdasarkan deskripsi teks, menggunakan matriks TF-IDF dan dataframe untuk menampilkan tingkat kesamaannya.
"""

# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa nama product
cosine_sim_df = pd.DataFrame(cosine_sim, index=data['product_name'], columns=data['product_name'])
print('Shape:', cosine_sim_df.shape)

# Melihat similarity matrix pada setiap product
cosine_sim_df.sample(20, axis=1).sample(20, axis=0)

"""Hasil Cosine Similarity menunjukkan tingkat kesamaan antar produk, dengan nilai 1 berarti identik dan nilai mendekati 0 berarti tidak serupa. Matriks ini membantu mengidentifikasi produk yang saling terkait berdasarkan kesamaan deskripsi.

## **Mendapatkan Rekomendasi**

Fungsi `product_recommendations` memberikan rekomendasi produk serupa berdasarkan cosine similarity, menampilkan produk teratas beserta informasi kategori.
"""

def product_recommendations(nama_product, similarity_data=cosine_sim_df, items=data[['product_name', 'default_category']], k=10):

    # Mengambil indeks produk dengan similarity tertinggi menggunakan argpartition (efisien untuk top-k)
    index = similarity_data.loc[:,nama_product].to_numpy().argpartition(
        range(-1, -k, -1))

    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]

    # Menghapus produk awal dari daftar rekomendasi
    closest = closest.drop(nama_product, errors='ignore')

    # Menggabungkan dengan data produk untuk informasi tambahan
    return pd.DataFrame(closest).merge(items).head(k)

# Menampilkan informasi produk dengan nama 'Aloe Vera Clay Mask'
data[data.product_name.eq('Aloe Vera Clay Mask')]

# Mendapatkan rekomendasi product yang mirip dengan Aloe Vera Clay Mask
product_recommendations('Aloe Vera Clay Mask')

"""Hasil rekomendasi produk menunjukkan produk serupa dengan "Aloe Vera Clay Mask", termasuk informasi seperti nama produk, kategori, harga, rating, dan jumlah ulasan. Rekomendasi ini mencakup produk seperti "Clay Mask Sebum Control", "Alaska Volcano Deep Pores Cleansing Clay Mask", dan lainnya dalam kategori "Clay Mask"."""